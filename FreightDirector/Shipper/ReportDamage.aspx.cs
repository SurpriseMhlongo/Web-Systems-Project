using System;
using System.Data.OleDb;
using System.Configuration;
using System.Data;
using System.Web.UI.WebControls;
using System.Web.UI;

namespace FreightDirector
{
    public partial class ReportDamage : Page
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                if (Session["ShipperID"] != null && Session["ShipperID"] is int shipperID)
                {
                    int loadID = GetShipperLoadID(shipperID); // Retrieve loadID from Shipper table
                    string firstName = GetShipperFirstName(shipperID);

                    if (!string.IsNullOrEmpty(firstName))
                    {
                        lblShipperName.Text = firstName;
                    }

                    // Check if a load is assigned (loadID is not -1)
                    if (loadID != -1)
                    {
                        lblLoadID.Text = "load ID: " +loadID.ToString(); // Display the loadID
                        btnReportDamage.Enabled = true; // Enable the report damage button
                        lblDamageID.Text = "Dam-"+GetNextDamageID().ToString(); // Display the autogenerated damage ID

                        // Retrieve LoadDeparture, LoadDestination, and goods in transit from the database
                        string departure = GetLoadDeparture(loadID);
                        string destination = GetLoadDestination(loadID);
                        string goods = GetGoodsInTransit(loadID);

                        // Set the session variables
                        Session["LoadDeparture"] = departure;
                        Session["LoadDestination"] = destination;
                        Session["GoodsDescription"] = goods;
                    }
                    else
                    {
                        btnReportDamage.Enabled = false; // Disable the report damage button
                        lblDamageID.Text = "N/A"; // Display "N/A" for damage ID
                        lblDamageMessage.Text = "You must have a load assigned to report a damage.";
                    }
                }
            }
        }

       
        protected void btnReportDamage_Click(object sender, EventArgs e)
        {
            if (Session["ShipperID"] != null && Session["ShipperID"] is int shipperID)
            {
                int loadID = GetShipperLoadID(shipperID); // Retrieve loadID from Shipper table
                string description = ddlDescription.SelectedValue;
                string comment = txtComment.Text;

                string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
                using (OleDbConnection connection = new OleDbConnection(connectionString))
                {
                    connection.Open();

                    int damageID = GetNextDamageID();

                    string query = "INSERT INTO Damage (damageID, loadID, shipperID, description, comment) VALUES (@DamageID, @LoadID, @ShipperID, @Description, @Comment)";
                    using (OleDbCommand command = new OleDbCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@DamageID", damageID);
                        command.Parameters.AddWithValue("@LoadID", loadID);
                        command.Parameters.AddWithValue("@ShipperID", shipperID);
                        command.Parameters.AddWithValue("@Description", description);
                        command.Parameters.AddWithValue("@Comment", comment);

                        // Execute the INSERT query
                        int rowsAffected = command.ExecuteNonQuery();

                        // Check if the insert was successful
                        if (rowsAffected > 0)
                        {
                            txtComment.Text = "";
                            lblDamageMessage.Text = "Damage reported successfully !";
                            lblDamageMessage.ForeColor = System.Drawing.Color.Green;

                            // Set lblDamageID with the newly generated damageID
                            lblDamageID.Text = damageID.ToString();
                        }
                        else
                        {
                            lblDamageMessage.Text = "Failed to send damage report.";
                            lblDamageMessage.ForeColor = System.Drawing.Color.Red;
                        }
                    }
                }
            }
        }

        private int GetShipperLoadID(int shipperID)
        {
            string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
            int loadID = -1;

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT loadID FROM Shipper WHERE shipperID = @ShipperID";
                using (OleDbCommand command = new OleDbCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ShipperID", shipperID);
                    object result = command.ExecuteScalar();

                    // Check if the result is DBNull or null
                    if (result != null && result != DBNull.Value)
                    {
                        loadID = Convert.ToInt32(result);
                    }
                }
            }

            return loadID;
        }



        private string GetShipperFirstName(int shipperID)
        {
            string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
            string firstName = "";

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT ShipperFName FROM Shipper WHERE shipperID = @ShipperID";
                using (OleDbCommand command = new OleDbCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@ShipperID", shipperID);
                    object result = command.ExecuteScalar();
                    if (result != null)
                    {
                        firstName = result.ToString();
                    }
                }
            }

            return firstName;
        }

        private int GetNextDamageID()
        {
            // Generate a random number for the damageID
            Random rand = new Random();
            int damageID = rand.Next(1000, 10000); // Adjust the range as needed

            // Check if the generated damageID already exists in the database
            string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT COUNT(*) FROM Damage WHERE damageID = @DamageID";
                using (OleDbCommand command = new OleDbCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@DamageID", damageID);
                    int count = (int)command.ExecuteScalar();

                    // If the generated damageID already exists, generate a new one
                    while (count > 0)
                    {
                        damageID = rand.Next(1000, 10000); // Adjust the range as needed
                        command.Parameters["@DamageID"].Value = damageID;
                        count = (int)command.ExecuteScalar();
                    }
                }
            }

            return damageID;
        }
        private string GetLoadDeparture(int loadID)
        {
            string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
            string departure = "";

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT collectionLocation FROM Load WHERE loadID = @LoadID";
                using (OleDbCommand command = new OleDbCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@LoadID", loadID);
                    object result = command.ExecuteScalar();
                    if (result != null)
                    {
                        departure = result.ToString();
                    }
                }
            }

            return departure;
        }

        private string GetLoadDestination(int loadID)
        {
            string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
            string destination = "";

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT dropOffLocation FROM Load WHERE loadID = @LoadID";
                using (OleDbCommand command = new OleDbCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@LoadID", loadID);
                    object result = command.ExecuteScalar();
                    if (result != null)
                    {
                        destination = result.ToString();
                    }
                }
            }

            return destination;
        }

        private string GetGoodsInTransit(int loadID)
        {
            string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=|DataDirectory|FreightDirector.accdb;";
            string goodsDescription = "";

            using (OleDbConnection connection = new OleDbConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT goodsDescription FROM Load WHERE loadID = @LoadID";
                using (OleDbCommand command = new OleDbCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@LoadID", loadID);
                    object result = command.ExecuteScalar();
                    if (result != null)
                    {
                        goodsDescription = result.ToString();
                    }
                }
            }

            return goodsDescription;
        }

    }
}